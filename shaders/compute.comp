#version 430 core

#define PI 3.14159265359
#define LOCAL_SIZE 16 // Make sure to change in main.c

#define LEFT   float( 1.0)
#define CENTER float( 0.0)
#define RIGHT  float(-1.0)

layout (local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

layout (rgba32f, binding = 0) uniform image2D screenTexture;
layout (location = 0) uniform uint frameNumber;
layout (location = 1) uniform uint time;

struct Agent {
    float x;
    float y;
    float angle;
    uint species;
};

layout(std430, binding = 0) buffer AgentBuffer {
    Agent agents[];
};

layout(std140, binding = 1) uniform MovementSettings {
    uint  numAgents;
    float speed;
    float turnRandomness;
    float turnSpeed;
    float sampleAngle;
    float sampleDist;
    uint  debug;
};

layout(std140, binding = 2) uniform SpeciesSettings {
    uvec4 speciesColours[4];
    uint  numSpecies;
};

uint pcg_state_hash(uint seed) {
    uint x = seed + frameNumber + time;
    x += (x << 10u);
    x ^= (x >> 6u);
    x += (x << 3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

float pcg_next(inout uint state, bool normalize_minus_one_to_one) {
    state = state * 1664525u + 1013904223u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    word = (word >> 22u) ^ word;
    if (normalize_minus_one_to_one) {
        float norm = float(word) * (1.0 / 4294967295.0);
        return (norm * 2.0 - 1.0);
    }
    return float(word) / 4294967295.0;
}

vec4 rgba(uint hex) {
    return vec4(uvec3(hex >> 16u, hex >> 8u, hex) & 0xFFu, 255) / 255.0;
}

vec4 getSpeciesColor(uint i) {
    uint vec4Index = i / 4; // Which vec4 (0, 1, 2, or 3)
    uint component = i % 4; // Which component (0, 1, 2, or 3)
    return rgba(speciesColours[vec4Index][component]);
}

float sample_in_direction(uint agentID, float direction, vec4 speciesColour) {
    float sampleAngleDirection = agents[agentID].angle + (direction * sampleAngle * PI);
    ivec2 samplePos = ivec2(
        agents[agentID].x + int(sampleDist * cos(sampleAngleDirection)),
        agents[agentID].y + int(sampleDist * sin(sampleAngleDirection)) 
    );

    vec4 pixel = imageLoad(screenTexture, samplePos);
    return 1 - length(pixel.rgb - speciesColour.rgb); // 1 - sqrt(dx^2 + dy^2 + dz^2)
}

float choose_direction(uint agentID, vec4 speciesColour) {
    float s1 = sample_in_direction(agentID, LEFT,   speciesColour); 
    float s2 = sample_in_direction(agentID, CENTER, speciesColour);
    float s3 = sample_in_direction(agentID, RIGHT,  speciesColour);
    
    if (s1 == s2 || s2 == s3 || s1 == s3) return CENTER;
    
    // No ties, find the maximum
    if (s1 > s2 && s1 > s3) return LEFT;
    if (s3 > s2 && s3 > s1) return RIGHT;
    return CENTER;
}

void main() {
    uint agentID = gl_GlobalInvocationID.x;
    if (agentID >= numAgents) return;

    vec2 texSize = imageSize(screenTexture);
    agents[agentID].species = agentID % numSpecies;
    uint species = agents[agentID].species;
    vec4 colour = getSpeciesColor(species);
    uint rng = pcg_state_hash(agentID + frameNumber * 7919u);

    if (frameNumber == 0) {
        float rx = pcg_next(rng, false) * float(texSize.x);
        float ry = pcg_next(rng, false) * float(texSize.y);
        float rangle = pcg_next(rng, false) * 2 * PI;

        agents[agentID].x = rx;
        agents[agentID].y = ry;
        agents[agentID].angle = rangle;
        return;
    }

    vec2 newPos = vec2(
        agents[agentID].x + speed * cos(agents[agentID].angle),
        agents[agentID].y + speed * sin(agents[agentID].angle)
    );

    // Reflect if hitting/outside boundaries
    if (newPos.x >= texSize.x || newPos.x < 0.0) {
        agents[agentID].angle = PI - agents[agentID].angle;
        newPos.x = clamp(newPos.x, 0.0, texSize.x - 1.0);
    }
    if (newPos.y >= texSize.y || newPos.y < 0.0) {
        agents[agentID].angle = -agents[agentID].angle;
        newPos.y = clamp(newPos.y, 0.0, texSize.y - 1.0);
    }

    agents[agentID].x = newPos.x;
    agents[agentID].y = newPos.y;

    float direction = choose_direction(agentID, colour);
    agents[agentID].angle += ((direction * turnSpeed) + (turnRandomness * pcg_next(rng, true))) * 2 * PI;
    
    ivec2 texelCoord = ivec2(agents[agentID].x, agents[agentID].y);
    imageStore(screenTexture, texelCoord, colour);
}