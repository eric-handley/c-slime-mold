#version 430 core

#define PI 3.14159265359
#define SPEED 0.1
#define N_AGENTS 1000
#define LOCAL_SIZE 10

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
	
layout (rgba32f, binding = 0) uniform image2D screenTexture;
layout (location = 0) uniform uint frameNumber;

struct Agent {
    float x;
    float y;
    float angle;
};

layout(std430, binding = 2) buffer AgentBuffer {
    Agent agents[N_AGENTS];
};

uint hash(uint x) {
    x += (x << 10u);
    x ^= (x >> 6u);
    x += (x << 3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

// PCG (Permuted Congruential Generator) for rng
float pcg_rand_float(uint agent_id) {
    uint state = hash(hash(agent_id) + frameNumber);
    uint oldstate = state;
    state = oldstate * 1664525u + 1013904223u;
    uint word = ((oldstate >> ((oldstate >> 28u) + 4u)) ^ oldstate) * 277803737u;
    word = (word >> 22u) ^ word;
    float normalized = float(word) * (1.0 / 4294967295.0);
    return (normalized * 2.0 - 1.0) * PI;
}

void main() {
    uint agent_id = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x);
    if (agent_id >= N_AGENTS) return;
    
    ivec2 texSize = imageSize(screenTexture);
    
    // agents[agent_id].angle = 1;pcg_rand_float(agent_id);

    agents[agent_id].x += SPEED * cos(agents[agent_id].angle);
    agents[agent_id].y += SPEED * sin(agents[agent_id].angle);

    if (agents[agent_id].x >= texSize.x) {
        agents[agent_id].x = 0;
    }
    if (agents[agent_id].x < 0) {
        agents[agent_id].x = texSize.x - 1;
    }
    if (agents[agent_id].y >= texSize.y) {
        agents[agent_id].y = 0;
    }
    if (agents[agent_id].y < 0) {
        agents[agent_id].y = texSize.y - 1;
    }

    ivec2 texelCoord = ivec2(agents[agent_id].x, agents[agent_id].y);
    
    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
    imageStore(screenTexture, texelCoord, white);
}