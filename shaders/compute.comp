#version 430 core

#define PI 3.14159265359
#define LOCAL_SIZE 32

#define LEFT    1 // In terms of radians
#define CENTER  0
#define RIGHT  -1

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
	
layout (rgba32f, binding = 0) uniform image2D screenTexture;
layout (location = 0) uniform uint frameNumber;

struct Agent {
    float x;
    float y;
    float angle;
    uint species;
};

layout(std430, binding = 0) buffer AgentBuffer {
    Agent agents[];
};

layout(std140, binding = 0) uniform Settings {
    uint  numAgents;
    uint  numSpecies;
    uvec4 speciesColours[4];
    float speed;
    float turnRandomness;
    float turnFactor;
    float sampleAngle;
    uint  sampleDist;
    uint  verbose;
};

uint hash(uint x) {
    x += (x << 10u);
    x ^= (x >> 6u);
    x += (x << 3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

uint pcg_state(uint seed) {
    return hash(seed + frameNumber);
}

float pcg_next(inout uint state, bool normalize_minus_one_to_one) {
    state = state * 1664525u + 1013904223u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    word = (word >> 22u) ^ word;
    if (normalize_minus_one_to_one) {
        float norm = float(word) * (1.0 / 4294967295.0);
        return (norm * 2.0 - 1.0);
    }
    return float(word) / 4294967295.0;
}

vec4 rgba(uint hex) {
    return vec4(uvec3(hex >> 16u, hex >> 8u, hex) & 0xFFu, 255) / 255.0;
}

uint hex(vec4 rgba) {
    uvec4 components = uvec4(rgba * 255.0 + 0.5);
    return (components.r << 16u) | (components.g << 8u) | components.b;
}

vec4 getSpeciesColor(uint i) {
    uint vec4Index = i / 4; // Which vec4 (0, 1, 2, or 3)
    uint component = i % 4; // Which component (0, 1, 2, or 3)
    return rgba(speciesColours[vec4Index][component]);
}

float sample_along_angle(float angle) {
    return 100;
}

float choose_direction(uint agentID) {
    float lSample = sample_along_angle(sampleAngle * LEFT  ); 
    float cSample = sample_along_angle(sampleAngle * CENTER);
    float rSample = sample_along_angle(sampleAngle * RIGHT );
    float maxSample = max(max(lSample, cSample), rSample);

    return (LEFT * float(maxSample = lSample) + RIGHT * float(maxSample = rSample));
}

void main() {
    uint agentID = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x);
    if (agentID >= numAgents) return;
    
    ivec2 texelCoord = ivec2(agents[agentID].x, agents[agentID].y);
    vec2 texSize = imageSize(screenTexture);
    uint species = agents[agentID].species;
    vec4 colour = getSpeciesColor(species);
    uint rng = pcg_state(agentID + frameNumber * 7919u); // Large prime to scramble frame correlation (maybe?)

    if (frameNumber == 0) {
        float rx = pcg_next(rng, false) * float(texSize.x);
        float ry = pcg_next(rng, false) * float(texSize.y);
        float rangle = pcg_next(rng, true);
        uint rspecies = agentID % numSpecies;

        agents[agentID].x = rx;
        agents[agentID].y = ry;
        agents[agentID].angle = rangle;
        agents[agentID].species = rspecies;
        return;
    }
    
    agents[agentID].x += speed * cos(agents[agentID].angle);
    agents[agentID].y += speed * sin(agents[agentID].angle);

    if (agents[agentID].x >= texSize.x) {
        agents[agentID].x = 0;
    }
    if (agents[agentID].x < 0) {
        agents[agentID].x = texSize.x - 1;
    }
    if (agents[agentID].y >= texSize.y) {
        agents[agentID].y = 0;
    }
    if (agents[agentID].y < 0) {
        agents[agentID].y = texSize.y - 1;
    }
    
    float turnDirection = choose_direction(agentID);
    agents[agentID].angle += (turnDirection * turnFactor) + (turnRandomness * pcg_next(rng, true));

    vec4 white = vec4(1,1,1,1);
    imageStore(screenTexture, texelCoord, colour);
}